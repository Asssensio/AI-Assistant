# –ø—É—Ç—å: libs/config.py
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ AI Assistant.

–ß–∏—Ç–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç 
—Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
"""

import os
from pathlib import Path
from typing import Dict, List, Any, Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def get_bool_env(key: str, default: bool = False) -> bool:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ boolean –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    value = os.getenv(key, str(default)).lower()
    return value in ("true", "1", "yes", "on")


def get_int_env(key: str, default: int = 0) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ integer –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    try:
        return int(os.getenv(key, str(default)))
    except ValueError:
        return default


def get_list_env(key: str, default: Optional[List[str]] = None) -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - –∑–∞–ø—è—Ç–∞—è)."""
    if default is None:
        default = []
    value = os.getenv(key, "")
    if not value:
        return default
    return [item.strip() for item in value.split(",") if item.strip()]


# === –û–ë–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò ===

def get_general_config() -> Dict[str, Any]:
    """–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã."""
    return {
        "debug": get_bool_env("DEBUG", True),
        "log_level": os.getenv("LOG_LEVEL", "INFO"),
        "timezone": os.getenv("TIMEZONE", "Europe/Moscow"),
    }


# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===

def get_database_config() -> Dict[str, Any]:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    return {
        "url": os.getenv("DATABASE_URL", "sqlite:///./ai_assistant.db"),
        "echo": get_bool_env("DB_ECHO", False),
        "pool_size": get_int_env("DB_POOL_SIZE", 5),
        "max_overflow": get_int_env("DB_MAX_OVERFLOW", 10),
    }


# === BACKEND API ===

def get_app_config() -> Dict[str, Any]:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    return {
        "host": os.getenv("BACKEND_HOST", "localhost"),
        "port": get_int_env("BACKEND_PORT", 8000),
        "debug": get_bool_env("DEBUG", True),
        "secret_key": os.getenv("SECRET_KEY", "your-secret-key-change-this-in-production"),
        "algorithm": os.getenv("ALGORITHM", "HS256"),
        "access_token_expire_days": get_int_env("ACCESS_TOKEN_EXPIRE_DAYS", 30),
        "allowed_hosts": get_list_env("ALLOWED_HOSTS", ["localhost", "127.0.0.1"]),
    }


def get_cors_config() -> Dict[str, Any]:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CORS."""
    return {
        "origins": get_list_env("CORS_ORIGINS", ["http://localhost:3000", "http://127.0.0.1:3000"]),
    }


# === WHISPER ===

def get_whisper_config() -> Dict[str, Any]:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Whisper."""
    return {
        "model": os.getenv("WHISPER_MODEL", "large-v3"),
        "device": os.getenv("WHISPER_DEVICE", "cuda"),
        "compute_type": os.getenv("WHISPER_COMPUTE_TYPE", "float16"),
        "language": os.getenv("WHISPER_LANGUAGE", "ru"),
        "task": os.getenv("WHISPER_TASK", "transcribe"),
    }


# === –ê–£–î–ò–û ===

def get_audio_config() -> Dict[str, Any]:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏."""
    return {
        "sample_rate": get_int_env("AUDIO_SAMPLE_RATE", 16000),
        "channels": get_int_env("AUDIO_CHANNELS", 1),
        "format": os.getenv("AUDIO_FORMAT", "WAV"),
        "chunk_minutes": get_int_env("RECORDING_CHUNK_MINUTES", 10),
        "base_path": os.getenv("RECORDINGS_BASE_PATH", "/recordings"),
    }


# === RASPBERRY PI ===

def get_pi_config() -> Dict[str, Any]:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Raspberry Pi."""
    return {
        "host": os.getenv("PI_HOST", "raspberrypi.local"),
        "user": os.getenv("PI_USER", "pi"),
        "ssh_key_path": os.path.expanduser(os.getenv("PI_SSH_KEY_PATH", "~/.ssh/id_rsa")),
        "recordings_path": os.getenv("PI_RECORDINGS_PATH", "/home/pi/recordings"),
    }


def get_transfer_config() -> Dict[str, Any]:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ–∞–π–ª–æ–≤."""
    return {
        "source_path": os.getenv("PI_RECORDINGS_PATH", "/home/pi/recordings"),
        "remote_host": os.getenv("PI_HOST", "192.168.1.100"),
        "remote_user": os.getenv("PI_USER", "user"),
        "remote_path": os.getenv("PC_RECORDINGS_PATH", "/recordings"),
        "ssh_key_path": os.path.expanduser(os.getenv("PI_SSH_KEY_PATH", "~/.ssh/id_rsa")),
    }


# === OPENAI ===

def get_openai_config() -> Dict[str, Any]:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI API."""
    return {
        "api_key": os.getenv("OPENAI_API_KEY", ""),
        "model": os.getenv("OPENAI_MODEL", "gpt-4-turbo-preview"),
        "max_tokens": get_int_env("OPENAI_MAX_TOKENS", 4000),
        "temperature": float(os.getenv("OPENAI_TEMPERATURE", "0.7")),
    }


# === TELEGRAM ===

def get_telegram_config() -> Dict[str, Any]:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞."""
    return {
        "bot_token": os.getenv("TELEGRAM_BOT_TOKEN", ""),
        "chat_id": os.getenv("TELEGRAM_CHAT_ID", ""),
        "webhook_url": os.getenv("TELEGRAM_WEBHOOK_URL", ""),
        "polling": not bool(os.getenv("TELEGRAM_WEBHOOK_URL")),
    }


# === BACKUP ===

def get_backup_config() -> Dict[str, Any]:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
    return {
        "enabled": get_bool_env("BACKUP_ENABLED", True),
        "path": os.getenv("BACKUP_PATH", "/backups"),
        "schedule": os.getenv("BACKUP_SCHEDULE", "0 2 * * *"),  # Daily at 2 AM
        "retention_days": get_int_env("BACKUP_RETENTION_DAYS", 30),
    }


# === DEVELOPMENT ===

def get_dev_config() -> Dict[str, Any]:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏."""
    return {
        "dev_mode": get_bool_env("DEV_MODE", True),
        "mock_whisper": get_bool_env("MOCK_WHISPER", False),
        "mock_telegram": get_bool_env("MOCK_TELEGRAM", False),
    }


# === –ü–£–¢–ò ===

def get_paths_config() -> Dict[str, Path]:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π."""
    recordings_path = Path(os.getenv("RECORDINGS_BASE_PATH", "/recordings"))
    
    return {
        "recordings": recordings_path,
        "models": Path(os.getenv("MODELS_PATH", "./models")),
        "logs": Path(os.getenv("LOGS_PATH", "./logs")),
        "cache": Path(os.getenv("CACHE_PATH", "./.cache")),
        "backups": Path(os.getenv("BACKUP_PATH", "/backups")),
    }


# === –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===

def validate_config() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API –∫–ª—é—á–∞
    if not get_openai_config()["api_key"]:
        errors.append("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram —Ç–æ–∫–µ–Ω–∞
    telegram_config = get_telegram_config()
    if not telegram_config["bot_token"] and not get_dev_config()["mock_telegram"]:
        errors.append("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ production
    app_config = get_app_config()
    if not app_config["debug"] and app_config["secret_key"] == "your-secret-key-change-this-in-production":
        errors.append("SECRET_KEY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–º–µ–Ω—ë–Ω –≤ production")
    
    if errors:
        print("‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for error in errors:
            print(f"  - {error}")
        return False
    
    return True


if __name__ == "__main__":
    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ AI Assistant...")
    
    if validate_config():
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    else:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        exit(1) 