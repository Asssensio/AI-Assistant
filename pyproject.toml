[tool.poetry]
name = "ai-assistant"
version = "0.1.0"
description = "Personal Voice Recording and Analysis System for Raspberry Pi"
authors = ["Старшой <your-email@example.com>"]
readme = "README.md"
packages = [
    {include = "backend"},
    {include = "telegram_bot", from = "telegram-bot"},
    {include = "libs"},
]

[tool.poetry.dependencies]
python = "^3.12"
# Backend dependencies
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
sqlalchemy = "^2.0.23"
alembic = "^1.12.1"
pydantic = "^2.5.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"
aiofiles = "^23.2.1"
# File monitoring
watchdog = "^3.0.0"
# AI/ML dependencies
openai = "^1.3.7"
openai-whisper = "^20231117"
torch = {version = "^2.1.1", source = "pytorch"}
torchaudio = {version = "^2.1.1", source = "pytorch"}
# Telegram bot dependencies
aiogram = "^3.2.0"
# Audio processing
librosa = "^0.10.1"
soundfile = "^0.12.1"
# Utilities
python-dotenv = "^1.0.0"
loguru = "^0.7.2"
httpx = "^0.25.2"

[[tool.poetry.source]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
mypy = "^1.7.1"
black = "^23.11.0"
isort = "^5.12.0"
pre-commit = "^3.6.0"
flake8 = "^6.1.0"
safety = "^2.3.4"
bandit = "^1.7.5"

[tool.poetry.group.pi.dependencies]
# Raspberry Pi specific dependencies
pyaudio = "^0.2.11"
gpiozero = "^1.6.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "whisper.*",
    "librosa.*",
    "soundfile.*",
    "torch.*",
    "torchaudio.*",
    "watchdog.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --strict-markers --cov=backend --cov=libs --cov-report=term-missing"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["backend", "libs"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:"
] 