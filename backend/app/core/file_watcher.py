# –ø—É—Ç—å: backend/app/core/file_watcher.py
"""
File Watcher –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
"""

import asyncio
import os
from pathlib import Path
from typing import Dict, Set
from datetime import datetime
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import logging

from libs.config import get_paths_config, get_general_config
from backend.app.models.database import get_db_sync
from backend.app.models.day import Day
from backend.app.models.fragment import Fragment
from backend.app.core.whisper_processor import WhisperProcessor


logger = logging.getLogger(__name__)


class AudioFileHandler(FileSystemEventHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤."""
    
    def __init__(self, file_watcher: 'FileWatcher'):
        self.file_watcher = file_watcher
        
    def on_created(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞."""
        if not event.is_directory and event.src_path.endswith('.wav'):
            self.file_watcher.add_pending_file(event.src_path)
            
    def on_moved(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞."""
        if not event.is_directory and event.dest_path.endswith('.wav'):
            self.file_watcher.add_pending_file(event.dest_path)


class FileWatcher:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏ –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è file watcher."""
        self.is_running = False
        self.observer = None
        self.pending_files: Set[str] = set()
        self.processed_files: Set[str] = set()
        self.processing_tasks: Dict[str, asyncio.Task] = {}
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.paths_config = get_paths_config()
        self.general_config = get_general_config()
        
        # Whisper –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        self.whisper_processor = WhisperProcessor()
        
        # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        self.recordings_path = self.paths_config["recordings"]
        self.ensure_directories()
        
    def ensure_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""
        self.recordings_path.mkdir(parents=True, exist_ok=True)
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤."""
        if self.is_running:
            return
            
        self.is_running = True
        logger.info(f"üìÅ –ó–∞–ø—É—Å–∫ File Watcher –¥–ª—è {self.recordings_path}")
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
        await self.scan_existing_files()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.setup_file_monitoring()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        asyncio.create_task(self.processing_loop())
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        self.is_running = False
        
        if self.observer:
            self.observer.stop()
            self.observer.join()
            
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if self.processing_tasks:
            await asyncio.gather(*self.processing_tasks.values(), return_exceptions=True)
            
        logger.info("üìÅ File Watcher –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    def setup_file_monitoring(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã."""
        if not self.recordings_path.exists():
            logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.recordings_path}")
            return
            
        self.observer = Observer()
        event_handler = AudioFileHandler(self)
        
        self.observer.schedule(
            event_handler, 
            str(self.recordings_path), 
            recursive=True
        )
        self.observer.start()
        logger.info(f"üìÇ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω –¥–ª—è {self.recordings_path}")
        
    async def scan_existing_files(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
        if not self.recordings_path.exists():
            return
            
        count = 0
        for wav_file in self.recordings_path.rglob("*.wav"):
            if self.is_file_ready(wav_file):
                await self.add_file_to_database(wav_file)
                count += 1
                
        logger.info(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {count} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
        
    def add_pending_file(self, file_path: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        if file_path not in self.processed_files:
            self.pending_files.add(file_path)
            logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {Path(file_path).name}")
            
    def is_file_ready(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ —Ä–∞—Å—Ç–µ—Ç (–∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
            size1 = file_path.stat().st_size
            asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            size2 = file_path.stat().st_size
            
            return size1 == size2 and size1 > 0
        except Exception:
            return False
            
    async def processing_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤."""
        while self.is_running:
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ —Ñ–∞–π–ª—ã
                files_to_process = list(self.pending_files)
                self.pending_files.clear()
                
                for file_path in files_to_process:
                    if file_path not in self.processing_tasks:
                        task = asyncio.create_task(
                            self.process_audio_file(file_path)
                        )
                        self.processing_tasks[file_path] = task
                
                # –û—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                completed_tasks = [
                    path for path, task in self.processing_tasks.items() 
                    if task.done()
                ]
                for path in completed_tasks:
                    del self.processing_tasks[path]
                
                await asyncio.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                await asyncio.sleep(10)
                
    async def process_audio_file(self, file_path: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞."""
        try:
            path_obj = Path(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
            if not self.is_file_ready(path_obj):
                await asyncio.sleep(2)
                if not self.is_file_ready(path_obj):
                    logger.warning(f"‚è∏Ô∏è –§–∞–π–ª –Ω–µ –≥–æ—Ç–æ–≤: {path_obj.name}")
                    return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            fragment = await self.add_file_to_database(path_obj)
            if not fragment:
                return
                
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            await self.transcribe_fragment(fragment)
            
            self.processed_files.add(file_path)
            logger.info(f"‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {path_obj.name}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            
    async def add_file_to_database(self, file_path: Path) -> Fragment:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
            date_str = self.extract_date_from_path(file_path)
            if not date_str:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏–∑ –ø—É—Ç–∏: {file_path}")
                return None
                
            file_date = datetime.strptime(date_str, "%Y-%m-%d").date()
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            start_time = self.extract_start_time_from_filename(file_path.name, file_date)
            
            db = get_db_sync()
            try:
                # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–µ–Ω—å
                day = db.query(Day).filter(Day.date == file_date).first()
                if not day:
                    day = Day(date=file_date)
                    db.add(day)
                    db.commit()
                    db.refresh(day)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç
                existing_fragment = db.query(Fragment).filter(
                    Fragment.file_path == str(file_path)
                ).first()
                
                if existing_fragment:
                    return existing_fragment
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
                file_stats = file_path.stat()
                fragment = Fragment(
                    day_id=day.id,
                    file_path=str(file_path),
                    original_filename=file_path.name,
                    file_size_bytes=file_stats.st_size,
                    start_time=start_time,
                    sample_rate=16000,  # –ò–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Pi
                    channels=1
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è
                day.total_fragments += 1
                
                db.add(fragment)
                db.commit()
                db.refresh(fragment)
                
                logger.info(f"üìù –§—Ä–∞–≥–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î: {fragment.original_filename}")
                return fragment
                
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î: {e}")
            return None
    
    async def transcribe_fragment(self, fragment: Fragment):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Whisper."""
        try:
            result = await self.whisper_processor.transcribe_file(fragment.file_path)
            
            if result:
                db = get_db_sync()
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                    db_fragment = db.query(Fragment).filter(Fragment.id == fragment.id).first()
                    if db_fragment:
                        db_fragment.transcript_text = result.get("text", "")
                        db_fragment.whisper_segments = result.get("segments", [])
                        db_fragment.whisper_model_used = result.get("model", "unknown")
                        db_fragment.transcribed = True
                        db_fragment.transcription_completed_at = datetime.utcnow()
                        db_fragment.duration_seconds = result.get("duration", None)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è
                        if db_fragment.duration_seconds:
                            day = db.query(Day).filter(Day.id == db_fragment.day_id).first()
                            if day:
                                day.total_duration_seconds += db_fragment.duration_seconds
                        
                        db.commit()
                        logger.info(f"üéØ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {fragment.original_filename}")
                        
                finally:
                    db.close()
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ {fragment.original_filename}: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑—É
            db = get_db_sync()
            try:
                db_fragment = db.query(Fragment).filter(Fragment.id == fragment.id).first()
                if db_fragment:
                    db_fragment.processing_error = str(e)
                    db_fragment.retry_count += 1
                    db.commit()
            finally:
                db.close()
    
    def extract_date_from_path(self, file_path: Path) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞."""
        # –û–∂–∏–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: /recordings/YYYY-MM-DD/filename.wav
        parts = file_path.parts
        for part in reversed(parts):
            if len(part) == 10 and part.count('-') == 2:
                try:
                    datetime.strptime(part, "%Y-%m-%d")
                    return part
                except ValueError:
                    continue
        return None
    
    def extract_start_time_from_filename(self, filename: str, date: datetime.date) -> datetime:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD_HH-MM-SS.wav
        try:
            base_name = filename.replace('.wav', '')
            if '_' in base_name:
                time_part = base_name.split('_')[1]
                time_str = time_part.replace('-', ':')
                return datetime.combine(date, datetime.strptime(time_str, "%H:%M:%S").time())
        except Exception:
            pass
            
        # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        return datetime.combine(date, datetime.now().time())
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ file watcher."""
        return {
            "is_running": self.is_running,
            "pending_files": len(self.pending_files),
            "processing_tasks": len(self.processing_tasks),
            "processed_files": len(self.processed_files),
            "recordings_path": str(self.recordings_path)
        } 