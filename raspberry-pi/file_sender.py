# –ø—É—Ç—å: raspberry-pi/file_sender.py
#!/usr/bin/env python3
"""
File Sender –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å Raspberry Pi –Ω–∞ –ü–ö.

–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –∏—Ö –Ω–∞ –ü–ö —á–µ—Ä–µ–∑ SSH/SCP.
"""

import os
import subprocess
import time
from pathlib import Path
from typing import List, Optional
from datetime import datetime
import hashlib

from libs.config import get_transfer_config
from libs.exceptions import FileTransferError


class FileSender:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å Pi –Ω–∞ –ü–ö."""
    
    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Ñ–∞–π–ª–æ–≤."""
        self.config = get_transfer_config()
        self.sent_files: set = set()
        self.load_sent_files_cache()
        
    def load_sent_files_cache(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
        cache_file = Path.home() / ".ai_assistant_sent_files"
        if cache_file.exists():
            try:
                with open(cache_file, 'r') as f:
                    self.sent_files = set(line.strip() for line in f)
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.sent_files)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
                
    def save_sent_files_cache(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
        cache_file = Path.home() / ".ai_assistant_sent_files"
        try:
            with open(cache_file, 'w') as f:
                for file_path in self.sent_files:
                    f.write(f"{file_path}\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")
            
    def get_file_hash(self, file_path: Path) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö—ç—à–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏."""
        hash_md5 = hashlib.md5()
        try:
            with open(file_path, "rb") as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    hash_md5.update(chunk)
            return hash_md5.hexdigest()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö—ç—à–∞ –¥–ª—è {file_path}: {e}")
            return ""
            
    def find_new_files(self) -> List[Path]:
        """–ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."""
        recordings_path = Path(self.config["source_path"])
        if not recordings_path.exists():
            return []
            
        new_files = []
        
        # –ò—â–µ–º WAV —Ñ–∞–π–ª—ã –≤–æ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–∫–∞—Ö
        for wav_file in recordings_path.rglob("*.wav"):
            file_str = str(wav_file)
            if file_str not in self.sent_files:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è (–∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
                if self._is_file_ready(wav_file):
                    new_files.append(wav_file)
                    
        return sorted(new_files)
        
    def _is_file_ready(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ (–∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∑–∞–ø–∏—Å—å)."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            size1 = file_path.stat().st_size
            time.sleep(1)
            size2 = file_path.stat().st_size
            
            # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π - –≥–æ—Ç–æ–≤
            return size1 == size2 and size1 > 0
        except Exception:
            return False
            
    def send_file(self, local_path: Path) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –ü–ö."""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–π –ø—É—Ç—å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            relative_path = local_path.relative_to(self.config["source_path"])
            remote_path = f"{self.config['remote_path']}/{relative_path}"
            
            # –°–æ–∑–¥–∞—ë–º —É–¥–∞–ª—ë–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            remote_dir = str(Path(remote_path).parent)
            mkdir_cmd = [
                "ssh",
                f"{self.config['remote_user']}@{self.config['remote_host']}",
                f"mkdir -p {remote_dir}"
            ]
            
            result = subprocess.run(mkdir_cmd, capture_output=True, text=True)
            if result.returncode != 0:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–¥–∞–ª—ë–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {result.stderr}")
                return False
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            scp_cmd = [
                "scp",
                str(local_path),
                f"{self.config['remote_user']}@{self.config['remote_host']}:{remote_path}"
            ]
            
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞: {local_path} -> {remote_path}")
            result = subprocess.run(scp_cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
                if self._verify_remote_file(local_path, remote_path):
                    self.sent_files.add(str(local_path))
                    self.save_sent_files_cache()
                    print(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {local_path.name}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞: {local_path.name}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {local_path}: {e}")
            return False
            
    def _verify_remote_file(self, local_path: Path, remote_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            local_size = local_path.stat().st_size
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            size_cmd = [
                "ssh",
                f"{self.config['remote_user']}@{self.config['remote_host']}",
                f"stat -f%z {remote_path} 2>/dev/null || stat -c%s {remote_path}"
            ]
            
            result = subprocess.run(size_cmd, capture_output=True, text=True)
            if result.returncode == 0:
                remote_size = int(result.stdout.strip())
                return local_size == remote_size
            else:
                return False
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {e}")
            return False
            
    def cleanup_old_files(self, days_to_keep: int = 7) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏."""
        cutoff_date = datetime.now().timestamp() - (days_to_keep * 24 * 3600)
        recordings_path = Path(self.config["source_path"])
        
        removed_count = 0
        for wav_file in recordings_path.rglob("*.wav"):
            if str(wav_file) in self.sent_files:
                if wav_file.stat().st_mtime < cutoff_date:
                    try:
                        wav_file.unlink()
                        self.sent_files.discard(str(wav_file))
                        removed_count += 1
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {wav_file}: {e}")
                        
        if removed_count > 0:
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤")
            self.save_sent_files_cache()
            
    def start_monitoring(self, check_interval: int = 60) -> None:
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤."""
        print("üì° –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤...")
        print(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {self.config['source_path']}")
        print(f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {self.config['remote_user']}@{self.config['remote_host']}:{self.config['remote_path']}")
        print(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_interval} —Å–µ–∫—É–Ω–¥")
        
        try:
            while True:
                # –ò—â–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
                new_files = self.find_new_files()
                
                if new_files:
                    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(new_files)} –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
                    
                    for file_path in new_files:
                        self.send_file(file_path)
                        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                        
                # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ (—Ä–∞–∑ –≤ —á–∞—Å)
                if int(time.time()) % 3600 == 0:
                    self.cleanup_old_files()
                    
                time.sleep(check_interval)
                
        except KeyboardInterrupt:
            print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üì° AI Assistant File Sender")
    print("===========================")
    
    sender = FileSender()
    sender.start_monitoring()


if __name__ == "__main__":
    main() 